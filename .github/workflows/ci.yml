name: CI - Build, Test, Scan, Push

on:
  push:
    branches: [ "main" ]
  pull_request: {}

permissions:
  contents: write

env:
  IMAGE_NAME: telecom-customer-insights

jobs:
  build-test-scan-push:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Cache pip
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest

      # 5. Run unit tests
      - name: Run unit tests
        run: PYTHONPATH=$PYTHONPATH:. pytest -q

      # 6. Generate synthetic data for CI
      - name: Generate synthetic data
        run: python app/data/generate_synthetic.py --rows 5000 --out app/data/customers.csv

      # 7. Docker Buildx setup
      - name: Docker setup Buildx
        uses: docker/setup-buildx-action@v3

      # 8. Docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 9. Auto bump version (semver patch)
      - name: Bump version
        if: github.ref == 'refs/heads/main'  # <- only on main branch
        id: bump
        run: |
          VERSION=$(cat VERSION)
          echo "Current version: $VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          PATCH=$((PATCH + 1))

          if [ $PATCH -ge 10 ]; then
            PATCH=0
            MINOR=$((MINOR + 1))
          fi

          if [ $MINOR -ge 4 ]; then
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo $NEW_VERSION > VERSION

          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # 10. Configure Git for committing VERSION
      - name: Configure Git
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 11. Commit VERSION changes if any
      - name: Commit VERSION changes
        if: github.ref == 'refs/heads/main'
        run: |
          git add VERSION
          git diff --cached --quiet || git commit -m "ci: bump version to ${{ steps.bump.outputs.version }}"

      # 12. Push VERSION changes back to the branch
      - name: Push VERSION changes
        if: github.ref == 'refs/heads/main'
        run: |
          git push origin HEAD:main

      # 13. Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set IMAGE_TAG
        id: vars
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=${{ steps.bump.outputs.version }}" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/pull/* ]]; then
            PR_NUMBER=$(echo "${{ github.ref }}" | cut -d'/' -f3)
            echo "IMAGE_TAG=pr-${PR_NUMBER}-${GITHUB_SHA::7}" >> $GITHUB_ENV
          else
            SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '/' '-')
            echo "IMAGE_TAG=${SAFE_BRANCH}-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi

      # 14. Build & push multi-arch Docker image
      - name: Build and push Docker image
        run: |
          IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          echo "Building and pushing $IMAGE:${IMAGE_TAG}"
          docker buildx create --use --name mybuilder
          docker buildx build \
            --platform linux/arm64 \
            --push \
            --cache-from=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/build-cache:telecom \
            --cache-to=type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/build-cache:telecom,mode=max \
            -t $IMAGE:${IMAGE_TAG} . 

      # 15. Setup Node.js & Snyk CLI
      - name: Setup Node.js & Snyk CLI
        uses: actions/setup-node@v3
        with:
          node-version: '24'
      - name: Install Snyk CLI
        run: npm install -g snyk

      # 16. Snyk Python Scan
      - name: Snyk Python Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects --severity-threshold=medium

      # 17. Snyk Container Scan
      - name: Pull amd64 image for Snyk
        run: docker pull --platform linux/arm64 ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
      - name: Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          args: --file=Dockerfile --severity-threshold=medium

      # 18. Upload image SHA artifact for CD workflow
      - name: Upload image SHA artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-sha
          path: image-sha.txt
