name: CI - Build, Test, Scan, Push

on:
  push:
    branches: [ "main" ]
  pull_request:

env:
  IMAGE_NAME: telecom-customer-insights

jobs:
  build-test-scan-push:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repo
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Set up Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Cache Python dependencies
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Install Python dependencies including pytest
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # 5. Run unit tests with correct PYTHONPATH
      - name: Run unit tests
        run: |
          PYTHONPATH=$PYTHONPATH:. pytest -q

      # 6. Generate synthetic data for CI
      - name: Generate synthetic data
        run: |
          python app/data/generate_synthetic.py --rows 5000 --out app/data/customers.csv

      # 7. Docker Buildx setup
      - name: Docker setup Buildx
        uses: docker/setup-buildx-action@v3

      # 8. Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # 9. Docker login
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 10. Build Docker image with cache
      - name: Build image
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest .

          # Move new cache to persistent location
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # 11. Push Docker image
      - name: Push image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      # 12. Setup Node.js & install Snyk CLI
      - name: Setup Node.js & Snyk CLI
        uses: actions/setup-node@v3
        with:
          node-version: '24'
      - name: Install Snyk CLI
        run: npm install -g snyk

      # 13. Snyk Python Scan (SAST)
      - name: Snyk Python Scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects --severity-threshold=medium

      # 14. Snyk Container Scan
      - name: Snyk Container Scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --file=Dockerfile --severity-threshold=medium
